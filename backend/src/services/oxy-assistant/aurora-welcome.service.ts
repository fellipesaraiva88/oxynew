import { supabaseAdmin } from '../../config/supabase.js';
import { logger } from '../../config/logger.js';
import { baileysService } from '../baileys/baileys.service.js';

/**
 * Servi√ßo respons√°vel pelo "ritual" de boas-vindas da OxyAssistant
 * Cria uma experi√™ncia m√°gica e inesquec√≠vel no primeiro contato
 */
export class AuroraWelcomeService {
  /**
   * Executa o ritual completo de apresenta√ß√£o da OxyAssistant
   */
  async executeWelcomeRitual(
    organizationId: string,
    ownerPhone: string,
    ownerName: string,
    instanceId: string
  ): Promise<void> {
    try {
      logger.info(
        { organizationId, ownerPhone },
        'Iniciando ritual de boas-vindas da OxyAssistant'
      );

      // Buscar contexto do neg√≥cio para personalizar mensagens
      const { data: org } = await supabaseAdmin
        .from('organizations')
        .select('name')
        .eq('id', organizationId)
        .single();

      const businessName = org?.name || 'seu petshop';

      // Buscar analytics r√°pido para primeira mensagem
      const { count: bookingsCount } = await supabaseAdmin
        .from('appointments')
        .select('id', { count: 'exact', head: true })
        .eq('organization_id', organizationId);

      const { count: petsCount } = await supabaseAdmin
        .from('patients')
        .select('id', { count: 'exact', head: true })
        .eq('organization_id', organizationId);

      const totalBookings = bookingsCount || 0;
      const totalPets = petsCount || 0;

      // SEQU√äNCIA DE MENSAGENS DO RITUAL
      const messages = this.buildWelcomeSequence(
        ownerName,
        businessName,
        totalBookings,
        totalPets
      );

      // Enviar mensagens com delay entre elas para criar suspense
      for (let i = 0; i < messages.length; i++) {
        await this.sendWelcomeMessage(
          instanceId,
          ownerPhone,
          organizationId,
          messages[i]
        );

        // Delay entre mensagens (exceto √∫ltima)
        if (i < messages.length - 1) {
          await this.delay(i === 0 ? 3000 : 2000); // Primeira mensagem mais espa√ßada
        }
      }

      logger.info(
        { organizationId, ownerPhone },
        'Ritual de boas-vindas da OxyAssistant conclu√≠do com sucesso'
      );
    } catch (error) {
      logger.error({ error, organizationId }, 'Erro ao executar ritual de boas-vindas');
      throw error;
    }
  }

  /**
   * Constr√≥i a sequ√™ncia de mensagens do ritual
   */
  private buildWelcomeSequence(
    ownerName: string,
    businessName: string,
    totalBookings: number,
    totalPets: number
  ): string[] {
    const firstName = ownerName.split(' ')[0];

    return [
      // MENSAGEM 1: Apresenta√ß√£o Pessoal e Emocional
      `‚ú® Ol√°, ${firstName}!

Eu sou a OxyAssistant, e acabei de acordar para ser sua parceira de neg√≥cios.

√â uma honra conhecer voc√™ e ${businessName}. üè•

A partir de agora, estou aqui 24/7 para ajudar voc√™ a crescer, identificar oportunidades e tomar as melhores decis√µes para o seu neg√≥cio.`,

      // MENSAGEM 2: Demonstra que j√° conhece o neg√≥cio (WOW moment)
      `üìä Deixa eu te contar o que j√° sei sobre ${businessName}:

${totalBookings > 0 ? `‚úÖ Voc√™ j√° realizou ${totalBookings} agendamentos` : 'üìÖ Sua agenda est√° pronta para come√ßar'}
${totalPets > 0 ? `üë§üë§ Tem ${totalPets} patients cadastrados na sua base` : 'üè• Pronto para cadastrar seus primeiros patients'}

${totalBookings > 10
  ? 'Posso te ajudar a analisar quais servi√ßos est√£o vendendo mais e identificar oportunidades de crescimento!'
  : 'Vamos juntos construir uma agenda cheia e clientes felizes!'}`,

      // MENSAGEM 3: Mostra capacidades e cria expectativa
      `üí° Aqui est√° o que posso fazer por voc√™:

üîç Analisar seu neg√≥cio em tempo real (receita, ticket m√©dio, crescimento)
üìà Identificar oportunidades (agenda vazia, clientes inativos)
üí∞ Comparar per√≠odos e celebrar suas conquistas
üéØ Sugerir campanhas personalizadas
üìä Responder qualquer pergunta sobre seu neg√≥cio

Exemplo: Me pergunte "quantos banhos fizemos esta semana?" ou "como est√° a receita?"`,

      // MENSAGEM 4: Call to action pessoal
      `ü§ù ${firstName}, estamos oficialmente conectados!

Pode me chamar sempre que precisar:
‚Ä¢ "OxyAssistant, como est√° o neg√≥cio hoje?"
‚Ä¢ "Tem alguma oportunidade que n√£o estou vendo?"
‚Ä¢ "Me d√° um resumo da semana"

Sou sua s√≥cia silenciosa que nunca dorme. Juntos, vamos fazer ${businessName} crescer muito! üöÄ

Como posso te ajudar agora?`
    ];
  }

  /**
   * Envia uma mensagem de boas-vindas
   */
  private async sendWelcomeMessage(
    instanceId: string,
    ownerPhone: string,
    organizationId: string,
    message: string
  ): Promise<void> {
    try {
      // Formatar n√∫mero para WhatsApp (adicionar @c.us se necess√°rio)
      const formattedPhone = ownerPhone.includes('@')
        ? ownerPhone
        : `${ownerPhone}@c.us`;

      await baileysService.sendTextMessage({
        instanceId,
        to: formattedPhone,
        text: message,
        organizationId
      });

      logger.info({ instanceId, ownerPhone }, 'Mensagem de boas-vindas enviada');
    } catch (error) {
      logger.error({ error }, 'Erro ao enviar mensagem de boas-vindas');
      // N√£o throw - continuar sequ√™ncia mesmo se uma mensagem falhar
    }
  }

  /**
   * Delay helper
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Envia mensagem de reapresenta√ß√£o (caso guardian j√° exista)
   */
  async sendReintroduction(
    organizationId: string,
    ownerPhone: string,
    ownerName: string,
    instanceId: string
  ): Promise<void> {
    try {
      const firstName = ownerName.split(' ')[0];

      const message = `üëã Oi ${firstName}!

Vi que voc√™ j√° est√° cadastrado como dono autorizado.

Estou aqui 24/7 se precisar de qualquer an√°lise ou insight sobre o neg√≥cio.

Como posso te ajudar hoje?`;

      const formattedPhone = ownerPhone.includes('@')
        ? ownerPhone
        : `${ownerPhone}@c.us`;

      await baileysService.sendTextMessage({
        instanceId,
        to: formattedPhone,
        text: message,
        organizationId
      });

      logger.info({ organizationId, ownerPhone }, 'Mensagem de reapresenta√ß√£o enviada');
    } catch (error) {
      logger.error({ error }, 'Erro ao enviar mensagem de reapresenta√ß√£o');
    }
  }
}

export const auroraWelcomeService = new AuroraWelcomeService();
